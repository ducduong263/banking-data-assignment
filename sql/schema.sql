CREATE TYPE enum_status_customer AS ENUM ('active', 'inactive', 'suspended');
CREATE TYPE enum_account_type AS ENUM ('payment', 'savings'); -- NEW: For consistency
CREATE TYPE enum_status_account AS ENUM ('active', 'inactive', 'closed', 'frozen');
CREATE TYPE enum_card_status AS ENUM ('active', 'inactive', 'lost', 'blocked', 'expired'); -- NEW: Correct type for card status
CREATE TYPE enum_document_type AS ENUM ('CCCD', 'Passport');
CREATE TYPE enum_biometric_type AS ENUM ('face', 'voice');
CREATE TYPE enum_limit_type AS ENUM ('PER_TRANSACTION', 'DAILY_TOTAL');
CREATE TYPE enum_device_type AS ENUM ('mobile', 'desktop', 'tablet');
CREATE TYPE enum_device_status AS ENUM ('active', 'blocked');
CREATE TYPE enum_trust_status AS ENUM ('verified', 'unverified');
CREATE TYPE enum_transaction_status AS ENUM ('pending', 'completed', 'failed', 'flagged', 'reverted');
CREATE TYPE enum_regulation_category AS ENUM ('A', 'B', 'C', 'D');
CREATE TYPE enum_auth_method AS ENUM ('password', 'pin', 'otp', 'biometric');
CREATE TYPE enum_auth_result AS ENUM ('success', 'failure');
CREATE TYPE enum_gender AS ENUM ('male', 'female', 'other');
CREATE TYPE transaction_group_enum AS ENUM ('NHOM_I.1', 'NHOM_I.2', 'NHOM_I.3', 'NHOM_I.4');


-- TẠO BẢNG

-- Bảng 1: Customers
CREATE TABLE Customers (
    customer_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    full_name VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    gender enum_gender NOT NULL DEFAULT 'other',
    address TEXT,
    phone_number VARCHAR(20) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    status enum_status_customer NOT NULL DEFAULT 'active',
    password_hash VARCHAR(255) NOT NULL,
    pin_hash VARCHAR(255),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Bảng 2: CustomerIdentityDocuments
CREATE TABLE CustomerIdentityDocuments (
    document_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    document_number VARCHAR(50) NOT NULL UNIQUE,
    document_type enum_document_type NOT NULL,
    nationality VARCHAR(100) NOT NULL,
    issue_date DATE,
    expiry_date DATE,
    issue_place VARCHAR(255)
);

-- Bảng 3: BiometricData
CREATE TABLE BiometricData (
    biometric_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL UNIQUE REFERENCES Customers(customer_id),
    biometric_type enum_biometric_type NOT NULL,
    template_hash TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Bảng 4: Accounts
CREATE TABLE Accounts (
    account_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    account_number VARCHAR(20) NOT NULL UNIQUE,
    account_type enum_account_type NOT NULL,
    balance DECIMAL(18, 2) NOT NULL CHECK (balance >= 0),
    currency CHAR(3) NOT NULL DEFAULT 'VND',
    status enum_status_account NOT NULL DEFAULT 'active',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    card_number_masked VARCHAR(20),
    card_expiry_date DATE,
    card_status enum_card_status
);

-- Bảng 5: Devices
CREATE TABLE Devices (
    device_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    device_identifier VARCHAR(255) NOT NULL UNIQUE,
    device_name VARCHAR(100),
    device_type enum_device_type NOT NULL,
    device_os VARCHAR(100),
    last_login_at TIMESTAMPTZ,
    status enum_device_status NOT NULL DEFAULT 'active',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Bảng 6: CustomerDeviceLinks
CREATE TABLE CustomerDeviceLinks (
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id) ON DELETE CASCADE,
    device_id BIGINT NOT NULL REFERENCES Devices(device_id) ON DELETE CASCADE,
    trust_status enum_trust_status NOT NULL DEFAULT 'unverified',
    is_active_session BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY (customer_id, device_id)
);

-- Bảng 7: TransactionLimits
CREATE TABLE TransactionLimits (
    limit_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    limit_type enum_limit_type NOT NULL,
    limit_amount DECIMAL(18, 2) NOT NULL CHECK (limit_amount > 0),
    currency CHAR(3) NOT NULL DEFAULT 'VND',
    UNIQUE (customer_id, limit_type)
);

-- Bảng 8: DailyLimitTrackers
CREATE TABLE DailyLimitTrackers (
    tracker_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    transaction_type_group transaction_group_enum NOT NULL,
    total_daily_amount DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
    running_total_amount DECIMAL(18, 2) NOT NULL DEFAULT 0.00,
    tracking_date DATE NOT NULL,
    last_updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (customer_id, transaction_type_group, tracking_date)
);

-- Bảng 9: Transactions
CREATE TABLE Transactions (
    transaction_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    source_account_id BIGINT NOT NULL REFERENCES Accounts(account_id),
    destination_account_id BIGINT REFERENCES Accounts(account_id),
    device_id BIGINT NOT NULL REFERENCES Devices(device_id),
    transaction_type VARCHAR(50) NOT NULL,
    amount DECIMAL(18, 2) NOT NULL CHECK (amount > 0),
    status enum_transaction_status NOT NULL,
    regulation_category enum_regulation_category,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Bảng 10: AuthLogs
CREATE TABLE AuthLogs (
    log_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    device_id BIGINT NOT NULL REFERENCES Devices(device_id),
    transaction_id BIGINT REFERENCES Transactions(transaction_id),
    auth_method enum_auth_method NOT NULL,
    result enum_auth_result NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Bảng 11: RiskTags
CREATE TABLE RiskTags (
    risk_tag_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id BIGINT NOT NULL REFERENCES Customers(customer_id),
    transaction_id BIGINT REFERENCES Transactions(transaction_id),
    tag_type VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- TẠO CÁC CHỈ MỤC
CREATE INDEX idx_accounts_customer_id ON Accounts (customer_id);
CREATE INDEX idx_docs_customer_id ON CustomerIdentityDocuments (customer_id);
CREATE INDEX idx_biometric_customer_id ON BiometricData (customer_id);
CREATE INDEX idx_links_device_id ON CustomerDeviceLinks (device_id);
CREATE INDEX idx_limits_customer_id ON TransactionLimits (customer_id);
CREATE INDEX idx_trackers_customer_date ON DailyLimitTrackers (customer_id, tracking_date);
CREATE INDEX idx_transactions_source_account_id ON Transactions (source_account_id);
CREATE INDEX idx_transactions_destination_account_id ON Transactions (destination_account_id);
CREATE INDEX idx_transactions_created_at ON Transactions (created_at);
CREATE INDEX idx_authlogs_customer_id ON AuthLogs (customer_id);
CREATE INDEX idx_authlogs_transaction_id ON AuthLogs (transaction_id);
CREATE INDEX idx_risktags_customer_id ON RiskTags (customer_id);
CREATE INDEX idx_risktags_transaction_id ON RiskTags (transaction_id);

-----------------------------------------------------------------
-- TRIGGER

CREATE OR REPLACE FUNCTION enforce_single_active_session()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') AND NEW.is_active_session = TRUE THEN
        UPDATE CustomerDeviceLinks
        SET is_active_session = FALSE
        WHERE customer_id = NEW.customer_id AND device_id != NEW.device_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_single_active_session
BEFORE INSERT OR UPDATE ON CustomerDeviceLinks
FOR EACH ROW
EXECUTE FUNCTION enforce_single_active_session();